// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String   @id @unique @default(uuid())
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
  isAdmin   Boolean   @default(false)

  email                String    @unique
  hashed_password      String
  sessions             Session[]
  email_verified_value Boolean   @default(false)
  is_sponsor           Boolean   @default(false)

  sponsor_request     beSponsorRequest[]
  sponsorshipAccepted String[]
  sponsorship         sponsorship[]      @relation("sponsorshipCreated")
  email_verified      email_verified[]
  password_reset      password_reset[]

  company_name    String?
  company_phone   String?
  company_email   String?
}

model beSponsorRequest {
  id         String   @id @default(uuid())
  created_at DateTime @default(now())
  updated_at DateTime @default(now())

  userId          String
  company_phone   String
  company_email   String

  user User @relation(references: [id], fields: [userId], onDelete: Cascade)
}

enum sponsorship_category {
  technology
  fashion
  other
  cosmetics
}

enum sponsorship_status {
  ended
  accepting
}

model sponsorship {
  id         String   @id @default(uuid())
  created_at DateTime @default(now())
  updated_at DateTime @default(now())

  sponsorId   String
  title       String
  category    sponsorship_category
  image_url   String
  image_id    String
  image_signature String
  description String
  amount      Float
  expires_at  DateTime
  status      sponsorship_status @default(accepting)

  sponsor             User   @relation("sponsorshipCreated", fields: [sponsorId], references: [id])
}

model Session {
  id        String   @id @unique
  userId    String
  expiresAt DateTime
  user      User     @relation(references: [id], fields: [userId], onDelete: Cascade)
}

model email_verified {
  id         String   @id @default(uuid())
  userId     String   @unique
  expires_at DateTime
  code       String
  user       User     @relation(references: [id], fields: [userId], onDelete: Cascade)
  email      String
}

model password_reset {
  id         String   @id @default(uuid())
  userId     String   @unique
  expires_at DateTime

  user User @relation(references: [id], fields: [userId], onDelete: Cascade)
}
